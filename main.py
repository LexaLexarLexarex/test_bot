from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
import keyboards as kb
from aiogram.dispatcher.filters import Text
from config import TOKEN

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)


@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç–∞ –¥–ª—è —é—Ä–∏—Å—Ç–æ–≤!\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é", reply_markup=kb.start_kb)


@dp.message_handler(commands=['help'])
async def process_start_command(message: types.Message):
    await message.answer("–û–ß–ï–ù–¨ –û–ß–ï–ù–¨ –ü–û–ú–û–ì–ê–ï–ú")


@dp.message_handler(Text(equals="ü§ü–ü—Ä–æ—Ñ–∏–ª—å"))
async def process_by_profile(message:types.Message):
    await message.answer(f"–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏: {message.from_user.first_name}\n–†–µ–∫–≤–∏–∑–∏—Ç—ã:{message.from_user.id}", reply_markup= kb.profile_kb)


@dp.message_handler(Text(equals="üìÉ–î–æ–∫—É–º–µ–Ω—Ç"))
async def process_by_document(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç:", reply_markup=kb.doc_kb)


@dp.message_handler(Text(equals="üîç–ò—Å–∫–∞—Ç—å —Å—Ç–∞—Ç—å—é"))
async def process_by_topic(message: types.Message):
    await message.answer("–°—Ç–∞—Ä–∞—Ç–µ–ª—å–Ω–æ –∏—â–µ–º", reply_markup=kb.profile_kb)


@dp.message_handler(Text(equals="‚ò∫–ü–æ–¥–¥–µ—Ä–∂–∫–∞"))
async def process_by_support(message: types.Message):
    await message.answer("–°—Ç–∞—Ä–∞—Ç–µ–ª—å–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º", reply_markup=kb.profile_kb)


@dp.callback_query_handler(lambda c: c.data == 'off')
async def process_by_offers(callback_query: types.CallbackQuery):
    await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –î–æ–≥–æ–≤–æ—Ä", reply_markup=kb.contract_kb)


@dp.callback_query_handler(lambda c: c.data == 'rent')
async def process_by_rent(callback_query: types.CallbackQuery):
    await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –î–æ–≥–æ–≤–æ—Ä", reply_markup=kb.choose_doc)


@dp.callback_query_handler(lambda c: c.data == 'back1')
async def process_by_rent(callback_query: types.CallbackQuery):
    await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç:", reply_markup=kb.doc_kb)


@dp.callback_query_handler(lambda c: c.data == 'menu')
async def process_by_menu(callback_query: types.CallbackQuery):
    await callback_query.message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç–∞ –¥–ª—è —é—Ä–∏—Å—Ç–æ–≤!\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é", reply_markup=kb.start_kb)


if __name__ == '__main__':
    executor.start_polling(dp)
